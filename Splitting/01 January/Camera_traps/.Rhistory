geom_errorbar(aes(ymin=dens-sd, ymax=dens+sd))
ggplot(estDat, aes(x = site, y = dens)) +
geom_bar(position = position_dodge(), stat="identity", fill="light blue") +
geom_errorbar(aes(ymin=dens-sd, ymax=dens+sd)) +
scale_x_continuous(name="Survey site") +
scale_y_continuous(name="Animals.km2") +
ggtitle("Animal density estimates calculated with REM and remBoot")
library(remBoot)
?boot_sd
?remBoot
output: pdf_document
install.packages("installr")
installr::installr()
remove.packages("remBoot", lib="~/R/win-library/3.3")
library(githubinstall)
githubinstall("remBoot")
data(hDat)
load("G:/Dropbox/GitHub/remBoot/data-raw/hDat.RData")
View(remDat)
library(remBoot)
data(hDat)
grpDat <- split_dat(hDat)
rem(dat = grpDat[[1]], tm = 3600, v = 1.4)
tm <- 3600
v <- 1.4
rem(dat = grpDat[[1]], tm, v)
nboots <- 1000
remsD <- lapply(grpDat, boot_sd)
remsSD <- lapply(remsD, sd)
remsSD
tm <- 1880
v <- 0.89
nboots <- 1000
output <- remBoot(hDat, tm, v, nboots, error_stat = c("sd"))
output
data(hDat)
output <- remBoot(hDat, tm = 2870, v = 1.8, nboots = 1000, error_stat = c("ci"))
detach("package:remBoot", unload=TRUE)
remBoot <- function(.df, tm, v, nboots, error_stat){
## Written by Kevin Keenan 2013 and Anthony Caravaggi 2016
## distributed under GPL3
grpDat <- split_dat(.df)
remsD <- lapply(grpDat, function(x){
d <- replicate(nboots, bsD(x, tm, v))
return(d)
})
res <- list()
if(is.element("sd", error_stat)){
resSD <- lapply(remsD, sd)
names(resSD) <- levels(.df[[1]])
res$sd <- c(res, resSD)
}
if(is.element("ci", error_stat)){
resCI <- t(sapply(remsD, quantile, probs = c(0.025, 0.975)))
colnames(resCI) <- c("Lower", "Upper")
rownames(resCI) <- levels(.df[[1]])
res$ci <- resCI
}
return(res)
}
output <- remBoot(hDat, tm = 2870, v = 1.8, nboots = 1000, error_stat = c("ci"))
library("remBoot", lib.loc="~/R/win-library/3.3")
remBoot2 <- function(.df, tm, v, nboots, error_stat){
## Written by Kevin Keenan 2013 and Anthony Caravaggi 2016
## distributed under GPL3
grpDat <- split_dat(.df)
remsD <- lapply(grpDat, function(x){
d <- replicate(nboots, bsD(x, tm, v))
return(d)
})
res <- list()
if(is.element("sd", error_stat)){
resSD <- lapply(remsD, sd)
names(resSD) <- levels(.df[[1]])
res$sd <- c(res, resSD)
}
if(is.element("ci", error_stat)){
resCI <- t(sapply(remsD, quantile, probs = c(0.025, 0.975)))
colnames(resCI) <- c("Lower", "Upper")
rownames(resCI) <- levels(.df[[1]])
res$ci <- resCI
}
return(res)
}
output <- remBoot2(hDat, tm = 2870, v = 1.8, nboots = 1000, error_stat = c("ci"))
output
output <- remBoot(hDat, tm = 2870, v = 1.8, nboots = 1000, error_stat = c("ci"))
output
rem(dat = grpDat[[1]], tm = 3600, v = 1.4)
grpDat <- split_dat(hDat)
rem(dat = grpDat[[1]], tm = 3600, v = 1.4)
remBoot(hDat, tm = 1800, v = 0.89, nboots, error_stat = c("ci"))
nboots <- 1000
remBoot(hDat, tm = 1800, v = 0.89, nboots, error_stat = c("ci"))
devtools::install_github("arcaravaggi/remBoot", force = TRUE)
library("remBoot", lib.loc="~/R/win-library/3.3")
remDat <- data.frame(cbind(site <- sample(1:4, 200, replace=TRUE),
cam <- sample(1:20, 200, replace = TRUE),
count <- sample(1:3, 200, replace = TRUE),
dist <- runif(200, min=0, max=0.006),
theta <- runif(200, min=0, max=0.6)))
remDat <- data.frame(cbind(site <- sample(1:4, 200, replace=TRUE),
count <- sample(1:3, 200, replace = TRUE),
dist <- runif(200, min=0, max=0.006),
theta <- runif(200, min=0, max=0.6)))
colnames(remDat) <- c("site","cam", "count", "dist", "theta")
colnames(remDat) <- c("site","count", "dist", "theta")
remDat <- data.frame(cbind(site <- sample(1:4, 479, replace=TRUE),
count <- sample(1:3, 479, replace = TRUE),
dist <- runif(479, min=0, max=0.006),
theta <- runif(479, min=0, max=0.6)))
output <- remBoot(remDat, tm = 5040, v = 0.71, nboots, error_stat = c("ci"))
nboots <- 1000
output <- remBoot(remDat, tm = 5040, v = 0.71, nboots, error_stat = c("ci"))
output
output <- remBoot(remDat, tm = 5040, v = 0.71, nboots, error_stat = c("sd"))
output
remDat <- data.frame(cbind(site <- sample(1, 479, replace=TRUE),
count <- sample(1:3, 479, replace = TRUE),
dist <- runif(479, min=0, max=0.006),
theta <- runif(479, min=0, max=0.6)))
View(remDat)
output <- remBoot(remDat, tm = 5040, v = 0.71, nboots, error_stat = c("sd"))
output
plot.new()
plot(0,type='n',axes=FALSE,ann=FALSE)
citation("stats")
library(maptools)
sunrise.set <- function(lat, long, date, timezone="UTC", num.days=1){
#this needs to be long lat#
lat.long <- matrix(c(long, lat), nrow=1)
day <- as.POSIXct(date, tz=timezone)
sequence <- seq(from=day, length.out=num.days , by="days")
sunrise <- sunriset(lat.long, sequence, direction="sunrise", POSIXct=TRUE)
sunset <- sunriset(lat.long, sequence, direction="sunset", POSIXct=TRUE)
ss <- data.frame(sunrise, sunset)
ss <- ss[,-c(1,3)]
colnames(ss)<-c("sunrise", "sunset")
return(ss)
}
sunrise.set(51.672667, -3.519628, "2008-11-08", timezone="EST")
sunrise.set(51.672667, -3.519628, "2017-04-25")
sunrise.set(51.672667, -3.519628, "2017-04-25", num.days = 10)
(1.78 + 0.84)/2
setwd("G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January")
file_names <- dir("G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps") #where you have your files
your_data_frame <- do.call(rbind,lapply(file_names,read.csv))
setwd(./)
setwd(/Camera_traps)
setwd(../Camera_traps)
setwd(./Camera_traps)
setwd("./Camera_traps")
your_data_frame <- do.call(rbind,lapply(file_names,read.csv))
file_list <- list.files(path=file_names, pattern="*.csv")
file_names <- "G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps" #where you have your files
file_list <- list.files(path=file_names, pattern="*.csv")
file_names <- "./Camera_traps" #where you have your files
file_list <- list.files(path=file_names, pattern="*.csv")
G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/
file_names <- "G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps" #where you have your files
file_list <- list.files(path=file_names, pattern="*.csv")
for (i in 1:length(file_list)){
assign(file_list[i],
read.csv(paste(folder, file_list[i], sep=''))
)}
folder <- "G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps" #where you have your files
file_list <- list.files(path=folder, pattern="*.csv")
for (i in 1:length(file_list)){
assign(file_list[i],
read.csv(paste(folder, file_list[i], sep=''))
)}
folder <- "G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps/" #where you have your files
file_list <- list.files(path=folder, pattern="*.csv")
for (i in 1:length(file_list)){
assign(file_list[i],
read.csv(paste(folder, file_list[i], sep=''))
)}
View(cams_tcw_glas.csv)
data <-
do.call("rbind",
lapply(file_list,
function(x)
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
View(data)
View(data)
data <- na.omit(data)
View(data)
View(cams_att_aber.csv)
data <-
do.call("rbind",
lapply(file_list,
function(x)
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
data[apply(data,1,function(x)any(!is.na(x))),]
View(data)
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
df <-
do.call("rbind",
lapply(file_list,
function(x)
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
completeFun(df, "Species")
df2 <- completeFun(df, "Species")
View(df2)
View(df)
View(df)
df2 <- completeFun(df, 7)
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
completeVec <- data[-which(data[, desiredCols] == ""), ]
return(data[completeVec, ])
}
df2 <- completeFun(df, 7)
completeFun <- function(data, desiredCols) {
data[data==""]<-NA
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
df2 <- completeFun(df, 7)
View(df2)
View(cams_hhe_hart.csv)
older <- "G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps/" # path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv")   # create list of all .csv files in folder
# read in each .csv file in file_list and create a data frame with the same name as the .csv file
#for (i in 1:length(file_list)){
#  assign(file_list[i],
#         read.csv(paste(folder, file_list[i], sep=''))
#  )}
# read in each .csv file in file_list and rbind them into a data frame called data
df <-
do.call("rbind",
lapply(file_list,
function(x)
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
# remove rows with blank cells and NAs in a specified column
completeFun <- function(data, desiredCols) {
data[data==""]<-NA
completeVec <- complete.cases(data[, desiredCols])
return(data[completeVec, ])
}
df2 <- completeFun(df, 7)
folder <- "G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps/" # path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv")   # create list of all .csv files in folder
df <-
do.call("rbind",
lapply(file_list,
function(x)
read.csv(paste(folder, x, sep=''),
# remove rows with blank cells and NAs in a specified column
stringsAsFactors = FALSE)))
completeFun <- function(data, desiredCols) {
completeVec <- complete.cases(data[, desiredCols])
data[data==""]<-NA
return(data[completeVec, ])
}
df2 <- completeFun(df, 7)
df <- completeFun(df, 7)
cams_jan_UMAC <- completeFun(df, 7)
View(cams_jan_UMAC)
df <-
do.call("rbind",
lapply(file_list,
function(x)
read.csv(paste(folder, x, sep=''),
tmp$ID <- x
stringsAsFactors = FALSE)))
df <-
do.call("rbind",
lapply(file_list,
function(x)
read.csv(paste(folder, x, sep=''),
tmp$ID <- x,
stringsAsFactors = FALSE)))
df <-
do.call("rbind",
lapply(file_list,
function(x) {tmp <- read.csv(paste(folder...etc.))
tmp$ID <- x
return(tmp) }
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
df <-
do.call("rbind",
lapply(file_list,
function(x) {tmp <- read.csv(paste(folder, sep=''))
tmp$ID <- x
return(tmp) }
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
function(x) {tmp <- read.csv(paste(folder, sep=''))
tmp$ID <- x
return(tmp) }
df <-
do.call("rbind",
lapply(file_list,
function(x)
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
View(df)
df <- do.call("rbind",
lapply(file_list, function(x)
# read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
df <- do.call("rbind",
lapply(file_list, function(x) {
tmp <- read.csv(paste(folder, sep=''))
tmp$ID <- x
return(tmp)
}))
df <- do.call("rbind",
lapply(file_list, function(x) {
tmp <- read.csv(paste(folder, sep=''))
tmp$ID <- x
return(tmp)
}))
df <- do.call("rbind",
lapply(file_list, function(x) {
tmp <- read.csv(paste(folder, sep=''))
tmp$ID <- x
return(tmp)
}
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
df <- do.call("rbind",
lapply(file_list, function(x) {
tmp <- read.csv(paste(folder, sep=''))
tmp$ID <- x
return(tmp)
},
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
df <- do.call("rbind",
lapply(file_list, function(x) {
tmp <- read.csv(paste(folder, sep=''))
tmp$ID <- folder
return(tmp)
},
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
df <- do.call("rbind",
lapply(file_list, function(x) {
tmp <- read.csv(paste(folder, sep=''))
tmp$ID <- x
return(tmp)
},
# read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
df <- do.call("rbind",
lapply(file_list, function(x) {
tmp <- read.csv(paste(folder, sep=''))
tmp$ID <- x
return(tmp)
},
# read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE))
df <- do.call("rbind",
lapply(file_list, function(x) {
tmp <- read.csv(paste(folder, x, sep=''))
tmp$ID <- x
return(tmp)
},
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)))
df <- do.call("rbind",
lapply(file_list, function(x) {
tmp <- read.csv(paste(folder, x, sep=''))
tmp$ID <- x
return(tmp)
}))
name <- function(x) {
tmp <- read.csv(paste(folder, sep=''))
tmp$ID <- x
return(tmp)
}
df <- do.call("rbind",
lapply(file_list, name)
)
name <- function(x) {
tmp <- read.csv(paste(folder, x, sep=''))
tmp$ID <- x
return(tmp)
}
df <- do.call("rbind",
lapply(file_list, name)
)
View(df2)
file_names <- dir("G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps/")
df3 <- do.call(rbind, lapply(file_names,
function(x) cbind(read.csv(x),
name=strsplit(x,'\\.')[[1]][1])))
View(df)
df <- do.call("rbind",
lapply(file_list, function(x)
read.csv(paste(folder, x, sep=''),
name=strsplit(x,'\\.'),
stringsAsFactors = FALSE)))
df <- do.call("rbind",
lapply(file_list, function(x)
read.csv(paste(folder, x, sep=''),
name=strsplit(x,'\\.') [[1]][1],
stringsAsFactors = FALSE)))
df <- do.call("rbind",
lapply(file_list, function(x)
cbind(read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE),
name=strsplit(x,'\\.')[[1]][1]
)))
filenames <- list.files(path = "~/Camera_traps", pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE)
library(plyr)
import.list <- llply(filenames, read.csv)
import.list <- llply(file_names, read.csv)
import.list <- llply(file_list, read.csv)
library(plyr)
import.list <- llply(file_list, read.csv)
filenames <- list.files(path = "~/Camera_traps/", m = "jan" pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE)
filenames <- list.files(path = "G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps/", m = "jan"
pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE)
library(plyr)
import.list <- llply(filenames, read.csv)
d4 <- as.data.frame(improt.list)
combined <- do.call("rbind", import.list)
combined <- do.call("rbind", import.list)
read_csv_filename <- function(filename){
ret <- read.csv(filename)
ret$Source <- filename #EDIT
ret
}
import.list <- ldply(filenames, read_csv_filename)
for (i in 1:length(file_list)){
assign(file_list[i],
read.csv(paste(folder, file_list[i], sep=''))
)}
library(data.table)
my.path <- "G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps/" #set the path
filenames <- paste(my.path, list.files(path=my.path), sep="/") #list of files
something <- do.call("rbind", sapply(filenames, read.csv, sep=";", simplify = FALSE))
df <- do.call("rbind",
lapply(file_list, function(x) {
if (!file.size(x) == 0) {
read.csv(paste(folder, x, sep='')},
stringsAsFactors = FALSE)}))
df <- do.call("rbind",
lapply(file_list, function(x) {
if (!file.size(x) == 0) {
read.csv(paste(folder, x, sep=''),
stringsAsFactors = FALSE)}}))
View(df)
my.dt<- data.table(do.call("rbind", sapply(filenames, read.csv,
sep=";")), keep.rownames = T)
multmerge = function(mypath){
filenames=list.files(path=mypath, full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=T)})
Reduce(function(x,y) {merge(x,y)}, datalist)
}
df4 <- multmerge("G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps/")
df4 <- multmerge("G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps/")
View(df4)
folder <- "~/Camera_traps/" # path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv")   # create list of all .csv files in folder
folder <- "~./Camera_traps/" # path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv")   # create list of all .csv files in folder
folder <- "./Camera_traps/" # path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv")   # create list of all .csv files in folder
folder <- "G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps/" # path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv")   # create list of all .csv files in folder
for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.table(file, header=TRUE, sep="\t")
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.table(file, header=TRUE, sep="\t")
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
df5 <- for (file in file_list){
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.table(file, header=TRUE, sep="\t")
}
# if the merged dataset does exist, append to it
if (exists("dataset")){
temp_dataset <-read.table(file, header=TRUE, sep="\t")
dataset<-rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
View(cams_fff_aber.csv)
ls()
# read in each .csv file in file_list and create a data frame with the same name as the .csv file
for (i in 1:length(file_list)){
assign(file_list[i],
read.csv(paste(folder, file_list[i], sep=''))
)}
folder <- "G:/GDrive/Mammal Society/University Challenge 2017/Data/Analyses/01 January/Camera_traps/" # path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv")   # create list of all .csv files in folder
# read in each .csv file in file_list and create a data frame with the same name as the .csv file
for (i in 1:length(file_list)){
assign(file_list[i],
read.csv(paste(folder, file_list[i], sep=''))
)}
ls()
rm(2,4)
